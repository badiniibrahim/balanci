// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  clerkId          String   @unique
  email            String   @unique
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String?

  // Relations
  budgets          Budget[]
  fixedExpenses    FixedExpense[]
  variableExpenses VariableExpense[]
  budgetRules      BudgetRule[]
  userSettings     UserSettings[]
  subscription     Subscription[]
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [clerkId], references: [clerkId])
  clerkId              String   @unique
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  currency  String
  userId    Int?
  clerkId   String   @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime @default(now())
  amount    Float
  updatedAt DateTime @updatedAt
  clerkId   String
  createdAt DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model FixedExpense {
  id           Int      @id @default(autoincrement())
  name         String
  dueDate      DateTime
  budgetAmount Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clerkId      String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VariableExpense {
  id           Int      @id @default(autoincrement())
  name         String
  budgetAmount Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clerkId      String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetRule {
  id                      Int    @id @default(autoincrement())
  needsPercentage         Float  @default(50)
  savingsPercentage       Float  @default(30)
  wantsPercentage         Float  @default(20)
  actualNeedsPercentage   Float  @default(0)
  actualSavingsPercentage Float  @default(0)
  actualWantsPercentage   Float  @default(0)
  clerkId                 String
  userId                  Int
  user                    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clerkId, userId])
}
